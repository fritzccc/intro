{"version":3,"sources":["components/Menu/index.js","components/MobileMenu/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["Menu","_ref","menus","activatedMenu","onMenuChange","menuList","map","menu","react_default","a","createElement","className","key","htmlFor","id","name","value","type","onChange","e","currentTarget","MobileMenu","toggleMenu","menuExpanded","index","pos","menuClass","classNames","concat","Object","defineProperty","menuTextClass","menu-text-expand","onClick","index_es","icon","Navbar","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","preventDefault","setState","state","mobileMenuEvent","arguments","length","undefined","stopPropagation","headerClass","_this$state","components_Menu","components_MobileMenu","toConsumableArray","letter","React","Component","library","add","faTimes","App","onWindowScrolled","sticky","window","scrollY","py-5","stick-to-top","contentClass","container-padding","_this2","onscroll","components_Navbar","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9da9155a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Menu = ({ menus, activatedMenu, onMenuChange }) => {\r\n  const menuList = menus ? menus.map(menu =>\r\n    <li className={activatedMenu === menu ? \"nav-item active\" : \"nav-item\"} key={menu}>\r\n      <label htmlFor={menu} className=\"nav-link\">{menu}</label>\r\n      <input id={menu} name=\"active\" className=\"d-none\" value={menu} type=\"radio\" onChange={e => onMenuChange(e.currentTarget.value)} />\r\n    </li>\r\n  ) : null;\r\n\r\n  return (\r\n    <div id=\"desktop-menu\" className=\"d-none d-md-block\">\r\n      <ul className=\"navbar-nav\">\r\n        {menuList}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\nexport default Menu","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport classNames from 'classnames'\r\n\r\nconst MobileMenu = ({ menus, toggleMenu, menuExpanded, onMenuChange, activatedMenu }) => {\r\n  const menuList = menus ? menus.map((menu, index) => {\r\n    const pos = index === 0 ? \"top\" : index === 1 ? \"middle\" : index === 2 ? \"bottom\" : \"hidden\";\r\n    const menuClass = classNames(\r\n      'menu-global',\r\n      `menu-${pos}`,\r\n      { [`menu-${pos}-expand expand active`]: menuExpanded && activatedMenu === menu },\r\n      { [`menu-${pos}-expand expand`]: menuExpanded && activatedMenu !== menu }\r\n    );\r\n    const menuTextClass = classNames(\r\n      'menu-text',\r\n      { 'menu-text-expand': menuExpanded }\r\n    );\r\n\r\n    return (\r\n      <li key={index} onClick={e => onMenuChange(menu, e)} className={menuClass}>\r\n        <span className={menuTextClass}>{menu}</span>\r\n      </li>\r\n    )\r\n  }) : null;\r\n\r\n  return (\r\n    <div id=\"mobile-menu\" className=\"d-md-none\">\r\n      <ul className=\"menu\">\r\n        {menuList}\r\n        <div className={menuExpanded ? \"menu-close menu-close-visible\" : \"menu-close\"}>\r\n          <FontAwesomeIcon icon=\"times\" />\r\n        </div>\r\n        <div className=\"click-blocker\" onClick={toggleMenu}></div>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MobileMenu","import React from 'react';\r\nimport Menu from '../Menu';\r\nimport MobileMenu from '../MobileMenu';\r\n\r\nconst menus = [\"Menu 1\", \"Menu 2\", \"Menu 3\", \"Menu 4\"]\r\n\r\nclass Navbar extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      activatedMenu: menus[0],\r\n      menuExpanded: false\r\n    }\r\n  }\r\n\r\n  toggleMenu = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ menuExpanded: !this.state.menuExpanded })\r\n  }\r\n\r\n  onMenuChange = (menu, mobileMenuEvent = undefined) => {\r\n    mobileMenuEvent && mobileMenuEvent.stopPropagation();\r\n    if (!mobileMenuEvent || (mobileMenuEvent && this.state.menuExpanded)) {\r\n      this.setState({ activatedMenu: menu })\r\n      this.setState({ menuExpanded: false })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { headerClass } = this.props;\r\n    const { menuExpanded, activatedMenu } = this.state\r\n    const { toggleMenu, onMenuChange } = this;\r\n    return (\r\n      <nav id=\"header\" className={headerClass}>\r\n        <div className=\"container d-flex\">\r\n          <Menu menus={menus} onMenuChange={onMenuChange} activatedMenu={activatedMenu} />\r\n          <MobileMenu menus={menus} onMenuChange={onMenuChange} activatedMenu={activatedMenu} menuExpanded={menuExpanded} toggleMenu={toggleMenu} />\r\n\r\n          <div className=\"navbar-brand ml-auto mx-0\">\r\n            <div className=\"site-title\">\r\n              FANGJIAN\r\n              <span className=\"pl-2 last-name\">\r\n                {[...\"CHEN\"].map(letter => <span key={letter}>{letter}</span>)}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport Navbar from './components/Navbar'\r\nimport './App.scss';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport classNames from 'classnames'\r\n\r\nlibrary.add(faTimes)\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      headerClass: 'navbar navbar-expand-md py-5',\r\n      contentClass: 'container'\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    window.onscroll = () => this.onWindowScrolled()\r\n  }\r\n  onWindowScrolled = () => {\r\n    const sticky = window.scrollY > 30;\r\n    this.setState({\r\n      headerClass: classNames(\r\n        'navbar', 'navbar-expand-md',\r\n        { 'py-5': !sticky },\r\n        { 'stick-to-top': sticky }\r\n      ),\r\n      contentClass: classNames(\r\n        'container',\r\n        { 'container-padding': sticky }\r\n      )\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { headerClass, contentClass } = this.state;\r\n    return (\r\n      <div>\r\n        <Navbar headerClass={headerClass} />\r\n        <div className={contentClass}></div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\nif(module.hot){\r\n  module.hot.accept()\r\n}"],"sourceRoot":""}