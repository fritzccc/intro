{"version":3,"sources":["components/Menu/index.js","components/MobileMenu/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["Menu","_ref","menus","activatedMenu","onMenuChange","console","log","menuList","map","menu","react_default","a","createElement","className","key","htmlFor","id","name","value","type","onChange","MobileMenu","toggleMenu","menuExpanded","index","pos","concat","onClick","index_es","icon","Navbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","preventDefault","setState","state","currentTarget","_this$state","React","Component","library","add","faTimes","App","components_Navbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aeac96ee.chunk.js","sourcesContent":["import React from 'react'\n\nexport default ({ menus, activatedMenu, onMenuChange }) => {\n  console.log('activatedMenu: ', activatedMenu);\n  const menuList = menus ? menus.map(menu =>\n    <li className={activatedMenu === menu ? \"nav-item active\" : \"nav-item\"} key={menu}>\n      <label htmlFor={menu} className=\"nav-link\">{menu}</label>\n      <input id={menu} name=\"active\" className=\"d-none\" value={menu} type=\"radio\" onChange={onMenuChange} />\n    </li>\n  ) : null;\n\n  return (\n    <div id=\"desktop-menu\" className=\"d-none d-sm-block\">\n      <ul className=\"navbar-nav\">\n        {menuList}\n      </ul>\n    </div>\n  )\n}","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nexport default ({ menus, toggleMenu, menuExpanded }) => {\n  const menuList = menus ? menus.map((menu, index) => {\n    const pos = index === 0 ? \"top\" : index === 1 ? \"middle\" : index === 2 ? \"bottom\" : \"hidden\";\n    return (\n      <li key={index} className={menuExpanded ? `menu-global menu-${pos} menu-${pos}-expand expand` : `menu-global menu-${pos}`}>\n        <span className={menuExpanded ? \"menu-text menu-text-expand\" : \"menu-text\"}>{menu}</span>\n      </li>\n    )\n  }) : null;\n\n  return (\n    <div id=\"mobile-menu\" className=\"d-sm-none\">\n      <ul className=\"menu\" onClick={toggleMenu}>\n        {menuList}\n        <div className={menuExpanded ? \"menu-close menu-close-visible\" : \"menu-close\"}>\n          <FontAwesomeIcon icon=\"times\"/>\n        </div>\n        <div className=\"click-blocker\"></div>\n      </ul>\n    </div>\n  )\n}","import React from 'react';\nimport Menu from '../Menu';\nimport MobileMenu from '../MobileMenu';\n\nconst menus = [\"Menu 1\", \"Menu 2\", \"Menu 3\", \"Menu 4\"]\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      activatedMenu: menus[0],\n      menuExpanded: false\n    }\n  }\n\n  toggleMenu = (e) => {\n    e.preventDefault();\n    this.setState({ menuExpanded: !this.state.menuExpanded })\n  }\n\n  onMenuChange = e => {\n    this.setState({ activatedMenu: e.currentTarget.value })\n  }\n\n  render() {\n    const { menuExpanded, activatedMenu } = this.state\n    const { toggleMenu, onMenuChange } = this;\n    return (\n      <nav className=\"navbar navbar-expand-sm fixed-top align-items-end px-4\">\n        <Menu menus={menus} onMenuChange={onMenuChange} activatedMenu={activatedMenu} />\n        <MobileMenu menus={menus} menuExpanded={menuExpanded} toggleMenu={toggleMenu} />\n\n        <div className=\"navbar-brand ml-auto\">\n          <div className=\"site-title\">\n            FANGJIAN\n          <span className=\"pl-2\">CHEN</span>\n          </div>\n        </div>\n      </nav>\n    )\n  }\n}\n\nexport default Navbar;","import React from 'react';\nimport Navbar from './components/Navbar'\nimport './App.scss';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faTimes)\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nif(module.hot){\n  module.hot.accept()\n}"],"sourceRoot":""}